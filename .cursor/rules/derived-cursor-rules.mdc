---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

All project documentation, including design specifications, meeting notes, and implementation details, should be stored in a consistent and accessible manner.  The use of markdown (.md) files is recommended for all documentation.  Version control (e.g., Git) is mandatory for all project files.

New plan documents should be versioned (e.g., plan.md, plan2.md).  Changes should be clearly documented using tools like `diff` to highlight modifications.  The use of timestamps in filenames (e.g., YYYY-MM-DD_HH-mm-ss) is recommended.  All documents should be generated by SpecStory where possible.  Version 2 of the project plan (plan2.md) introduces pre-processing of CSV data to JSON format and the use of timestamps for date filtering.  Plan2.md details a robust data preprocessing script handling various CSV formats, including quoted fields and missing data. A new method for adding data to `work-data.json` using LLM processing has been introduced (see 2025-05-13_09-28-untitled.md and 2025-05-13_09-28-将工作表数据转换为json格式.md).  LLM processing can be used to supplement `work-data.json` with data from spreadsheets, focusing on specific date ranges as demonstrated in 2025-05-13_09-28-将工作表数据转换为json格式.md.  The files `src/components/utils/csvParser.ts` and any related code are now redundant and should be removed following code review and testing after the switch to direct JSON data loading.  The removal of redundant code in `src/components/work-visualization` components has been documented in 2025-05-13_09-43-vue文件优化与冗余代码清理.md.  Updated dependencies (Vite, Vite-plugin-PWA, Vue, TypeScript, @vitejs/plugin-vue) to latest versions as of 2025-05-13. Configuration changes documented in 2025-05-13_09-45-untitled.md.  Dependency updates documented in 2025-05-13_09-45-update-vite-and-vue-dependencies.md.  Removal of eslint and oxlint related dependencies and configurations documented in 2025-05-13_11-38-untitled.md. Biome v2.0.0-beta.3 added as linter and formatter (2025-05-13).  To disable Biome's unused import check, set `"noUnusedImports": "off"` within the `"correctness"` group in `biome.json`.  The default date range for the work visualization component must be set to the last six months of data, with the start date set to the 1st of the month and the end date set to the latest date in the data. This logic is implemented in `src/views/work-visualization/index.vue` using the `calculateDefaultDateRange` function (2025-05-13). A button should be added near the date picker to select all dates in the data. (2025-05-13) A module should be added to display total hours worked and total income based on a unit price of 62 for the selected criteria.  This module should display total hours and income in a visually prominent location, such as a card below the filter section and above the chart. (2025-05-13, 2025-05-13_12-17-添加总工时和总收入模块.md)  The implementation details are documented in 2025-05-13_12-17-添加总工时和总收入模块.md.  When using DaisyUI, use theme-aware classes like `bg-base-100` instead of `bg-white` for better dark mode support. (2025-05-13, 2025-05-13_12-25-优化bg-white样式与主题切换.md). The frontend must use the `/api/part-time` endpoint to fetch data, implementing caching and a refresh button as detailed in 2025-05-14_02-40-untitled.md.  Changes to the `income` page should be reflected in the `incomexin` page, addressing any differences appropriately (2025-05-14).  Changes to the `income` page must be reflected in the `incomexin` page, addressing any differences appropriately (2025-05-14, 2025-05-14_03-05-同步income与incomexin页面修改.md).  The `/api/income-xin` endpoint should be used for fetching data for the `incomexin` page, implementing caching and a refresh button (2025-05-14, 2025-05-14_03-05-同步income与incomexin页面修改.md).  A data transformation mechanism must be implemented to handle differences in data structure between the `/api/part-time` endpoint and the `incomexin` page's JSON data.  This mechanism should ensure consistent data presentation across both pages. (2025-05-14)  A `formatTime` function should be implemented to handle different date formats consistently, particularly for the `incomexin` page. (2025-05-14)  Data transformation functions must handle potential discrepancies in data structure between different endpoints and ensure data consistency across pages. (2025-05-14)  The data transformation mechanism for the `incomexin` page should explicitly handle fields such as 交通补贴, 餐补, 午餐报销, and 通讯费, ensuring they are correctly mapped to the corresponding fields in the API-compatible data structure. (2025-05-14)  The date format in the `time` field of the `incomexin` JSON data should be standardized to YYYY-MM-DD format. (2025-05-14) A custom display order should be implemented to avoid redundant columns in the `JsonToTable` component.  A `prepareTableData` function should be implemented to restructure data according to the display order and avoid redundant columns in the `JsonToTable` component (2025-05-14).  The `prepareTableData` function should handle the transformation of the `time` field to YYYY-MM format (2025-05-14). The `JsonToTable` component's data should be displayed in reverse chronological order based on the `time` field.  The `time` field should be parsed as a date object for easier sorting. (2025-05-14)


## TECH STACK

- JavaScript (Frontend)
- Chart.js (Data Visualization)
- Node.js or Python (Backend - for data preprocessing)
- Vite (updated to v6.0.0 as of 2025-05-13)
- vite-plugin-pwa (updated to v1.0.0 as of 2025-05-13)
- Vue (updated to v3.5.13 as of 2025-05-13)
- TypeScript (updated to v5.8.3 as of 2025-05-13)
- @vitejs/plugin-vue (updated to v5.0.4 as of 2025-05-13)
- Biome (v2.0.0-beta.3 as of 2025-05-13)
- DaisyUI (as of 2025-05-13)


## DATA HANDLING & PREPROCESSING

All CSV data **must** be pre-processed into JSON format before being used by the frontend.  A dedicated script (using Node.js or Python) **must** be created for this purpose.  The script **should** handle various CSV formats, including those with quoted fields and missing data.  Date fields **must** be converted to a standard format (YYYY-MM-DD) and a corresponding Unix timestamp (in milliseconds) **must** be added. The resulting JSON **must** be an array of objects, where each object represents a single data record with fields like "date", "timestamp", "hours", "project", "description", and "personnel".  The JSON data **should** be saved as a static file (e.g., `work-data.json`).  The preprocessing script should be robust enough to handle various data formats and edge cases as detailed in plan2.md.  The preprocessing script should handle different date formats (YYYY/MM/DD and YYYY-MM-DD) and quoted lines as specified in plan2.md.  LLM processing may be used to supplement existing `work-data.json` with data from spreadsheets (see 2025-05-13_09-28-untitled.md and 2025-05-13_09-28-将工作表数据转换为json格式.md).  LLM processing should be considered for adding data from spreadsheets to `work-data.json`,  handling specific date ranges as needed.  After the switch to direct JSON data loading, the `csvParser.ts` file and any related code are considered redundant and should be removed after code review and testing.


## DEBUGGING

When debugging date filtering issues, using timestamps instead of date strings is recommended for increased accuracy and efficiency.  Zero work hour entries in the `工时趋势分析` chart should be represented as `null` or `NaN` to create visual gaps in the line chart.


## WORKFLOW & RELEASE RULES

The frontend **must** load pre-processed JSON data directly, eliminating the need for CSV parsing. All charts **must** dynamically update based on user selections in filtering components (e.g., date range, project selection).  The use of timestamps for date filtering is mandatory.  Responsive design is required for all UI elements, including charts and filters.  The default date range **must** be set to the last six months of data, with the start date set to the 1st of the month and the end date set to the latest date in the data. A button should be added near the date picker allowing selection of all dates within the dataset. (2025-05-13) A module must be added to display total hours worked and total income (calculated using a unit price of 62) based on the selected filter criteria. This module should be displayed in a visually prominent location, such as a card below the filter section and above the chart. (2025-05-13, 2025-05-13_12-17-添加总工时和总收入模块.md). The frontend must use the `/api/part-time` endpoint for data fetching, incorporating caching and a refresh button (2025-05-14).  Changes made to the `income` page must be synced to the `incomexin` page, handling any discrepancies appropriately (2025-05-14). The `/api/income-xin` endpoint must be used for fetching data for the `incomexin` page, implementing caching and a refresh button (2025-05-14, 2025-05-14_03-05-同步income与incomexin页面修改.md). A data transformation layer must be implemented to map data from the `/api/part-time` endpoint to the format expected by the shared components used in both the `income` and `incomexin` pages.  This will ensure data consistency despite the different data sources. (2025-05-14)  Data transformation functions must handle potential discrepancies in data structure between different endpoints and ensure data consistency across pages. (2025-05-14)  The data transformation layer for the `incomexin` page must explicitly handle and map fields like 交通补贴, 餐补, 午餐报销, and 通讯费 to their corresponding fields in the API-compatible data structure. (2025-05-14)  A `prepareTableData` function must be implemented to restructure data for the `JsonToTable` component,  handling data transformation and avoiding redundant columns. (2025-05-14) The `prepareTableData` function must handle the transformation of the `time` field to YYYY-MM format. (2025-05-14) The `JsonToTable` component must display data in reverse chronological order based on the `time` field, parsing the `time` field as a Date object for accurate sorting. (2025-05-14)


## CODING STANDARDS

- Maintain consistent markdown formatting throughout all documentation.
- Use clear and concise variable and function names.
- Adhere to established style guides for chosen programming languages.
- Remove eslint and oxlint related dependencies and configurations.  (Completed 2025-05-13)
- Use Biome for linting and formatting (2025-05-13)
- Configure Biome to handle unused imports as needed (See PROJECT DOCUMENTATION & CONTEXT SYSTEM for details).
- Use theme-aware classes from DaisyUI (e.g., `bg-base-100`) for better dark mode support. (2025-05-13)


## BEST PRACTICES

- Modularize code into reusable components.
- Implement thorough testing to ensure data accuracy and application stability.
- Prioritize efficient and maintainable code.
- Use version control (Git) for all code and documentation.
- Employ responsive design principles to ensure optimal user experience across devices.
- Implement data transformation layers to handle inconsistencies between different data sources and ensure consistent data presentation across the application. (2025-05-14)
- Explicitly handle and map specific fields during data transformation to ensure accuracy and consistency across different data sources. (2025-05-14)
- Preserve original field names during data transformation for the `incomexin` page to maintain data integrity and context. (2025-05-14)
- Implement a custom display order for the JsonToTable component to avoid redundant columns. (2025-05-14)
- Parse date strings as Date objects for reliable chronological sorting in the `JsonToTable` component. (2025-05-14)