---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

All project documentation, including design specifications, meeting notes, and implementation details, should be stored in a consistent and accessible manner.  The use of markdown (.md) files is recommended for all documentation.  Version control (e.g., Git) is mandatory for all project files.

New plan documents should be versioned (e.g., plan.md, plan2.md).  Changes should be clearly documented using tools like `diff` to highlight modifications.  The use of timestamps in filenames (e.g., YYYY-MM-DD_HH-mm-ss) is recommended.  All documents should be generated by SpecStory where possible.  Version 2 of the project plan (plan2.md) introduces pre-processing of CSV data to JSON format and the use of timestamps for date filtering.  Plan2.md details a robust data preprocessing script handling various CSV formats, including quoted fields and missing data. A new method for adding data to `work-data.json` using LLM processing has been introduced (see 2025-05-13_09-28-untitled.md and 2025-05-13_09-28-将工作表数据转换为json格式.md).  LLM processing can be used to supplement `work-data.json` with data from spreadsheets, focusing on specific date ranges as demonstrated in 2025-05-13_09-28-将工作表数据转换为json格式.md.  The files `src/components/utils/csvParser.ts` and any related code are now redundant and should be removed following code review and testing after the switch to direct JSON data loading.  The removal of redundant code in `src/components/work-visualization` components has been documented in 2025-05-13_09-43-vue文件优化与冗余代码清理.md.  Updated dependencies (Vite, Vite-plugin-PWA, Vue, TypeScript, @vitejs/plugin-vue) to latest versions as of 2025-05-13. Configuration changes documented in 2025-05-13_09-45-untitled.md.  Dependency updates documented in 2025-05-13_09-45-update-vite-and-vue-dependencies.md.


## TECH STACK

- JavaScript (Frontend)
- Chart.js (Data Visualization)
- Node.js or Python (Backend - for data preprocessing)
- Vite (updated to v6.0.0 as of 2025-05-13)
- vite-plugin-pwa (updated to v1.0.0 as of 2025-05-13)
- Vue (updated to v3.5.13 as of 2025-05-13)
- TypeScript (updated to v5.8.3 as of 2025-05-13)
- @vitejs/plugin-vue (updated to v5.0.4 as of 2025-05-13)


## DATA HANDLING & PREPROCESSING

All CSV data **must** be pre-processed into JSON format before being used by the frontend.  A dedicated script (using Node.js or Python) **must** be created for this purpose.  The script **should** handle various CSV formats, including those with quoted fields and missing data.  Date fields **must** be converted to a standard format (YYYY-MM-DD) and a corresponding Unix timestamp (in milliseconds) **must** be added. The resulting JSON **must** be an array of objects, where each object represents a single data record with fields like "date", "timestamp", "hours", "project", "description", and "personnel".  The JSON data **should** be saved as a static file (e.g., `work-data.json`).  The preprocessing script should be robust enough to handle various data formats and edge cases as detailed in plan2.md.  The preprocessing script should handle different date formats (YYYY/MM/DD and YYYY-MM-DD) and quoted lines as specified in plan2.md.  LLM processing may be used to supplement existing `work-data.json` with data from spreadsheets (see 2025-05-13_09-28-untitled.md and 2025-05-13_09-28-将工作表数据转换为json格式.md).  LLM processing should be considered for adding data from spreadsheets to `work-data.json`,  handling specific date ranges as needed.  After the switch to direct JSON data loading, the `csvParser.ts` file and any related code are considered redundant and should be removed after code review and testing.


## DEBUGGING

When debugging date filtering issues, using timestamps instead of date strings is recommended for increased accuracy and efficiency.  Zero work hour entries in the `工时趋势分析` chart should be represented as `null` or `NaN` to create visual gaps in the line chart.


## WORKFLOW & RELEASE RULES

The frontend **must** load pre-processed JSON data directly, eliminating the need for CSV parsing.  All charts **must** dynamically update based on user selections in filtering components (e.g., date range, project selection).  The use of timestamps for date filtering is mandatory.  Responsive design is required for all UI elements, including charts and filters.


## CODING STANDARDS

- Maintain consistent markdown formatting throughout all documentation.
- Use clear and concise variable and function names.
- Adhere to established style guides for chosen programming languages.


## BEST PRACTICES

- Modularize code into reusable components.
- Implement thorough testing to ensure data accuracy and application stability.
- Prioritize efficient and maintainable code.
- Use version control (Git) for all code and documentation.
- Employ responsive design principles to ensure optimal user experience across devices.